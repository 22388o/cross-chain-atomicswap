/**
*  @file
*  @copyright defined in go-seele/LICENSE
 */

package main

import (
	"context"
	"fmt"

	"github.com/seeleteam/go-seele/cmd/util"
	"github.com/seeleteam/go-seele/common"
	"github.com/seeleteam/go-seele/common/hexutil"
	"github.com/seeleteam/go-seele/crypto"
	"github.com/seeleteam/go-seele/p2p"
	"github.com/seeleteam/go-seele/rpc2"
	"github.com/urfave/cli"
)

func GetTxPoolContentAction(client *rpc.Client) (interface{}, error) {
	var result map[string][]map[string]interface{}
	err := client.Call(&result, "debug_getTxPoolContent")
	return result, err
}

func GetTxPoolTxCountAction(client *rpc.Client) (interface{}, error) {
	var result uint64
	err := client.Call(&result, "debug_getTxPoolTxCount")
	return result, err
}

func StartMinerAction(client *rpc.Client) (interface{}, error) {
	var result bool
	err := client.Call(&result, "miner_start", threadsValue)
	return result, err
}

func StopMinerAction(client *rpc.Client) (interface{}, error) {
	var result bool
	err := client.Call(&result, "miner_stop")
	return result, err
}

func SetMinerThreadsAction(client *rpc.Client) (interface{}, error) {
	var result bool
	err := client.Call(&result, "miner_setThreads", threadsValue)
	return result, err
}

func GetMinerThreadsAction(client *rpc.Client) (interface{}, error) {
	var result int
	err := client.Call(&result, "miner_getThreads")
	return result, err
}

func GetMinerStatusAction(client *rpc.Client) (interface{}, error) {
	var result string
	err := client.Call(&result, "miner_status")
	return result, err
}

func GetMinerHashrateAction(client *rpc.Client) (interface{}, error) {
	var result uint64
	err := client.Call(&result, "miner_hashrate")
	return result, err
}

func SetMinerCoinbaseAction(client *rpc.Client) (interface{}, error) {
	var result bool
	err := client.Call(&result, "miner_setCoinbase", coinbaseValue)
	return result, err
}

func GetMinerCoinbaseAction(client *rpc.Client) (interface{}, error) {
	var result common.Address
	err := client.Call(&result, "miner_getCoinbase")
	return result, err
}

func GetBlockTransactionCountAction(client *rpc.Client) (interface{}, error) {
	var result int
	var err error

	if hashValue != "" {
		err = client.Call(&result, "txpool_getBlockTransactionCountByHash", hashValue)
	} else {
		err = client.Call(&result, "txpool_getBlockTransactionCountByHeight", heightValue)
	}

	return result, err
}

func GetTransactionAction(client *rpc.Client) (interface{}, error) {
	var result map[string]interface{}
	var err error

	if hashValue != "" {
		err = client.Call(&result, "txpool_getTransactionByBlockHashAndIndex", hashValue, indexValue)
	} else {
		err = client.Call(&result, "txpool_getTransactionByBlockHeightAndIndex", heightValue, indexValue)
	}

	return result, err
}

func GetReceiptByTxHashAction(client *rpc.Client) (interface{}, error) {
	var result map[string]interface{}
	err := client.Call(&result, "txpool_getReceiptByTxHash", hashValue)
	return result, err
}

func GetTransactionByHashAction(client *rpc.Client) (interface{}, error) {
	return util.GetTransactionByHash(client, hashValue)
}

func GetPendingTransactionsAction(client *rpc.Client) (interface{}, error) {
	var result []map[string]interface{}
	err := client.Call(&result, "txpool_getPendingTransactions")
	return result, err
}

func GetPeerCountAction(client *rpc.Client) (interface{}, error) {
	var result int
	err := client.Call(&result, "network_getPeerCount")
	return result, err
}

// GetPeersInfo get peers information
func GetPeersInfo(client *rpc.Client) (interface{}, error) {
	var result []p2p.PeerInfo
	err := client.Call(&result, "network_getPeersInfo")
	return result, err
}

// GetNetworkVersion get current network version
func GetNetworkVersion(client *rpc.Client) (interface{}, error) {
	var result uint64
	err := client.Call(&result, "network_getNetworkVersion")
	return result, err
}

// GetProtocolVersion get seele protocol version
func GetProtocolVersion(client *rpc.Client) (interface{}, error) {
	var result uint
	err := client.Call(&result, "network_getProtocolVersion")
	return result, err
}

// GetDumpHeap dump heap for profiling
func GetDumpHeap(client *rpc.Client) (interface{}, error) {
	var result string
	err := client.Call(&result, "debug_dumpHeap", dumpFileValue, gcBeforeDump)
	return result, err
}

// Swap is swap of seele and eth
func Swap(c *cli.Context) error {
	// cmd := exec.Command("./solc.exe", "--bin", "./atomicswap.sol")
	// data, err := cmd.Output()
	// if err != nil {
	// 	return err
	// }

	bytecode := "0x608060405234801561001057600080fd5b506111ef806100206000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063335ef5bd1461006757806363615149146100d15780637249fbb614610128578063e16c7d9814610171575b600080fd5b6100b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560001916906020019092919080359060200190929190505050610257565b60405180826000191660001916815260200191505060405180910390f35b3480156100dd57600080fd5b5061010e60048036038101908080356000191690602001909291908035600019169060200190929190505050610702565b604051808215151515815260200191505060405180910390f35b34801561013457600080fd5b506101576004803603810190808035600019169060200190929190505050610c1d565b604051808215151515815260200191505060405180910390f35b34801561017d57600080fd5b506101a0600480360381019080803560001916906020019092919050505061106b565b604051808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018660001916600019168152602001858152602001841515151581526020018315151515815260200182600019166000191681526020019850505050505050505060405180910390f35b600080341115156102d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6d73672e76616c7565206d757374206265203e2030000000000000000000000081525060200191505060405180910390fd5b81428111151561036e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f74696d656c6f636b2074696d65206d75737420626520696e207468652066757481526020017f757265000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60023386348787604051602001808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018360001916600019168152602001828152602001955050505050506040516020818303038152906040526040518082805190602001908083835b602083101515610463578051825260208201915060208101905060208303925061043e565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa1580156104a5573d6000803e3d6000fd5b5050506040513d60208110156104ba57600080fd5b810190808051906020019092919050505091506104d68261114d565b156104e057600080fd5b610100604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200134815260200185600019168152602001848152602001600015158152602001600015158152602001600060010260001916815250600080846000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301906000191690556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e082015181600601906000191690559050508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1683600019167f329a8316ed9c3b2299597538371c2944c5026574e803b1ec31d6113e1cd67bde348888604051808481526020018360001916600019168152602001828152602001935050505060405180910390a4509392505050565b6000808361070f8161114d565b1515610783576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f636f6e7472616374496420646f6573206e6f742065786973740000000000000081525060200191505060405180910390fd5b84846002816040516020018082600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b6020831015156107e457805182526020820191506020810190506020830392506107bf565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015610826573d6000803e3d6000fd5b5050506040513d602081101561083b57600080fd5b810190808051906020019092919050505060001916600080846000191660001916815260200190815260200160002060030154600019161415156108e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f686173686c6f636b206861736820646f6573206e6f74206d617463680000000081525060200191505060405180910390fd5b863373ffffffffffffffffffffffffffffffffffffffff16600080836000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156109c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f776974686472617761626c653a206e6f7420726563656976657200000000000081525060200191505060405180910390fd5b60001515600080836000191660001916815260200190815260200160002060050160009054906101000a900460ff161515141515610a6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f776974686472617761626c653a20616c72656164792077697468647261776e0081525060200191505060405180910390fd5b42600080836000191660001916815260200190815260200160002060040154111515610b28576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f776974686472617761626c653a2074696d656c6f636b2074696d65206d75737481526020017f20626520696e207468652066757475726500000000000000000000000000000081525060400191505060405180910390fd5b600080896000191660001916815260200190815260200160002094508685600601816000191690555060018560050160006101000a81548160ff0219169083151502179055508460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc86600201549081150290604051600060405180830381858888f19350505050158015610bdc573d6000803e3d6000fd5b5087600019167fd6fd4c8e45bf0c70693141c7ce46451b6a6a28ac8386fca2ba914044e0e2391660405160405180910390a260019550505050505092915050565b60008082610c2a8161114d565b1515610c9e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f636f6e7472616374496420646f6573206e6f742065786973740000000000000081525060200191505060405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff16600080836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610d7f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f726566756e6461626c653a206e6f742073656e6465720000000000000000000081525060200191505060405180910390fd5b60001515600080836000191660001916815260200190815260200160002060050160019054906101000a900460ff161515141515610e25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f726566756e6461626c653a20616c726561647920726566756e6465640000000081525060200191505060405180910390fd5b60001515600080836000191660001916815260200190815260200160002060050160009054906101000a900460ff161515141515610ecb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f726566756e6461626c653a20616c72656164792077697468647261776e00000081525060200191505060405180910390fd5b4260008083600019166000191681526020019081526020016000206004015411151515610f86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f726566756e6461626c653a2074696d656c6f636b206e6f74207965742070617381526020017f736564000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000808660001916600019168152602001908152602001600020925060018360050160016101000a81548160ff0219169083151502179055508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc84600201549081150290604051600060405180830381858888f1935050505015801561102d573d6000803e3d6000fd5b5084600019167f989b3a845197c9aec15f8982bbb30b5da714050e662a7a287bb1a94c81e2e70e60405160405180910390a260019350505050919050565b60008060008060008060008060008015156110858b61114d565b1515141561109257611141565b6000808b6000191660001916815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260020154836003015484600401548560050160009054906101000a900460ff168660050160019054906101000a900460ff168760060154985098509850985098509850985098505b50919395975091939597565b60008073ffffffffffffffffffffffffffffffffffffffff16600080846000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141590509190505600a165627a7a7230582011a5bd1b14d68a47c8188df12a94e24a80b779b5b954984dba638f11ec6ff5ee0029"
	// bytecode := hexutil.BytesToHex(data)
	// fmt.Println("data:", bytecode)

	// deploy contract in first seele chain using the bytecode
	shardValue = 1
	publicKey, privateKey := crypto.MustGenerateShardKeyPair(shardValue)
	account := publicKey.ToHex()
	secret := hexutil.BytesToHex(crypto.FromECDSA(privateKey))
	fmt.Printf("public key:  %s\n", account)
	fmt.Printf("private key: %s\n", secret)

	// RPCAction(AddTxAction)
	client, err := rpc.DialTCP(context.Background(), addressValue)
	if err != nil {
		return err
	}

	// value set
	amountValue = "100000"
	feeValue = "1000000"
	paloadValue = bytecode

	txd, err := checkParameter(&privateKey.PublicKey, client)
	if err != nil {
		return err
	}

	tx, err := util.GenerateTx(privateKey, txd.To, txd.Amount, txd.Fee, txd.AccountNonce, txd.Payload)
	if err != nil {
		return err
	}

	var result bool
	err = client.Call(&result, "seele_addTx", tx)
	if err != nil {
		return err
	}

	// use newContract function in the deployed contract
	// secretlock := make([]byte, 32)
	// rand.Read(secretlock[:])
	// secrethash := sha256.Sum256(secretlock)
	// timelock := time.Now().Unix()+48*60*3600
	// fmt.Println("secrethash:", hexutil.BytesToHex(secrethash[:]))
	// secrethash hex: 0x129b2734e389b4b8f9b29733cb11cc6161b7f8332eee25c37b08af195f90738a
	// secretlock hex: 0x1913c75c159b4bd7f67d8f0319c30b313edfebe43fb9bfc7789b39a7fc5e969b
	// secrethash byte: [18 155 39 52 227 137 180 184 249 178 151 51 203 17 204 97 97 183 248 51 46 238 37 195 123 8 175 25 95 144 115 138]
	// secretlock byte: [25 19 199 92 21 155 75 215 246 125 143 3 25 195 11 49 62 223 235 228 63 185 191 199 120 155 57 167 252 94 150 155]
	bytecode = "0x335ef5bd000000000000000000000000d33a5aae979a96bb29ed67abf986ee35202140a1129b2734e389b4b8f9b29733cb11cc6161b7f8332eee25c37b08af195f90738a000000000000000000000000000000000000000000000000000000005c112e57"
	txd, err = checkParameter(&privateKey.PublicKey, client)
	if err != nil {
		return err
	}

	tx, err = util.GenerateTx(privateKey, txd.To, txd.Amount, txd.Fee, txd.AccountNonce, txd.Payload)
	if err != nil {
		return err
	}

	err = client.Call(&result, "seele_addTx", tx)
	if err != nil {
		return err
	}
	// audit the contract
	var result1 map[string]interface{}
	err = client.Call(&result, "txpool_getTransactionByHash", tx.Hash.ToHex())
	if err != nil {
		return err
	}
	fmt.Println("result:", result1)
	// deploy contract in second seele chain using the bytecode

	return err
}
